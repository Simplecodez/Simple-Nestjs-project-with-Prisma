import { Args, Context, Mutation, Resolver } from '@nestjs/graphql';
import { AuthService } from './auth.service';
import { User } from 'src/user/entities/user.entity';
import { CreateUserInput } from 'src/user/dto/create-user.input';
import { UseGuards } from '@nestjs/common';
import { LocalAuthGuard } from './guard/local-auth.guard';
import { LoginResponse } from './dtos/auth.dto';
import { LoginInput } from './dtos/login.dto';
import { Auth } from 'src/common/decorators/auth.decorator';
import { GetUser } from 'src/common/decorators/get-user.decorator';

@Resolver()
export class AuthResolver {
  constructor(private readonly authService: AuthService) {}

  /**
   * Handles user registration.
   *
   * Accepts email and password input, hashes the password securely,
   * and creates a new user record in the database.
   * Returns the created user object (excluding sensitive fields like the password).
   */

  @Mutation(() => User)
  register(@Args('createAuthInput') createAuthInput: CreateUserInput) {
    return this.authService.register(createAuthInput);
  }

  /**
   * Handles user login using email and password via the LocalAuthGuard.
   * The guard validates the credentials and attaches the authenticated user
   * to the request context.
   *
   * @param loginInput - Contains user credentials (email and password).
   * @param context - The GraphQL context, which will include the authenticated user
   * after the LocalAuthGuard has validated the credentials.
   *
   * @returns An object containing the JWT access token and user ID.
   */
  @UseGuards(LocalAuthGuard)
  @Mutation(() => LoginResponse)
  async login(
    @Args('loginInput') loginInput: LoginInput,
    @Context() context,
  ): Promise<{ access_token: string; id: string }> {
    return await this.authService.login(context.user);
  }

  /**
   * Stores the user's public key for biometric authentication.
   * This key is typically generated by the frontend during biometric setup
   * and will later be used to verify login attempts.
   *
   * @param publicKey - The public key generated by the frontend app.
   * It will be stored in the database under the user's `biometricKey` field.
   * @param user - The currently authenticated user (extracted from the JWT).
   *
   * @returns confirmation string.
   */

  @Auth()
  @Mutation(() => String)
  async setupBiometric(
    @Args('publicKey') publicKey: string, // This will be saved in the db as the biometricKey against the user row.
    @GetUser() user: User,
  ): Promise<string> {
    return this.authService.addBiometricKey(user.id, publicKey);
  }

  /**
   * Biometric login using the public key stored during setup.
   *
   * @param biometricKey - The public key sent from the frontend app.
   * In a real scenario, the frontend would also send a signature and payload,
   * which would be verified on the server using this public key.
   * @returns user id and access token.
   */

  @Mutation(() => LoginResponse)
  async biometricLogin(@Args('biometricKey') biometricKey: string) {
    return this.authService.verifyBiometricKey(biometricKey);
  }
}
